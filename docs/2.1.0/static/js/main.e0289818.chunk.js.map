{"version":3,"sources":["Selected.tsx","Selector.tsx","Setting.tsx","Configure.tsx","DataDrivenParameter.tsx","Home.tsx","index.tsx"],"names":["Selected","props","react","className","selecting","selected","tableau_ui_min","onClick","onClear","style","visibility","nextConfig","marginLeft","displayName","Selector","dropdownSelectProps","disabled","enabled","kind","onChange","onSelect","value","buttonProps","list","map","option","key","Setting","config","Selected_Selected","Selector_Selector","renderSelectElement","tableau","window","Loading","Configure","state","allLabel","applyButton","applyButtonLabel","autoUpdate","bg","configured","dataType","delimiter","displayField","field","field_config","field_enabled","field_list","updateOnSelection","includeAllValue","listenParam","listenParamName","listenParamList","matchParam","multiselect","param_config","param_enabled","param_list","parameter","selectedTabIndex","showDisplayValues","sort","txt","updateOnChange","useFormattedValues","worksheet","ws_config","ws_enabled","ws_list","bgChange","color","_this","setState","target","txtChange","paramChange","e","fieldChange","wsChange","sortChange","textInputChange","Object","defineProperty","name","checkboxChange","checked","listInputChange","tabChange","index","setParam","dashboard","extensions","dashboardContent","findParameterAsync","then","param","populateWS","clearParam","populateParamList","setWS","populateFieldList","clearWS","setField","worksheets","find","w","getSummaryDataAsync","dataTable","dropdownList","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","columns","Symbol","iterator","next","done","f","push","fieldName","err","return","clearField","submit","settings","set","saveAsync","ui","closeDialog","clearSettings","_this2","this","getAll","selParam","allowableValues","type","testWSSettings","_this3","getParametersAsync","params","_iteratorNormalCompletion2","_didIteratorError2","_iteratorError2","_step2","_iterator2","p","length","ws","selWorksheet","testFieldSettings","_iteratorNormalCompletion3","_didIteratorError3","_iteratorError3","_step3","_iterator3","_this4","column","selField","_iteratorNormalCompletion4","_didIteratorError4","_iteratorError4","_step4","_iterator4","_this5","_iteratorNormalCompletion5","_didIteratorError5","_iteratorError5","_step5","_iterator5","_this6","initializeDialogAsync","_iteratorNormalCompletion6","_didIteratorError6","_iteratorError6","_step6","_iterator6","testParamSettings","_this7","panels","Setting_Setting","margin","flexGrow","marginRight","display","width","children","maxLength","backgroundColor","xmlns","id","height","viewBox","x","y","fillRule","clipRule","fill","d","activation","alignment","onTabChange","tabs","content","React","unregister","NeedsConfiguring","displayValue","fakeWhiteOverlay","hex","rgb","result","exec","b","parseInt","g","r","hexToRgb","concat","Math","min","floor","DataDrivenParameter","currentVal","firstInit","configure","popupUrl","location","origin","process","displayDialogAsync","closePayload","setup","catch","error","get","errorCode","ErrorCodes","DialogClosedByUser","console","log","message","getParamData","ignoreSelection","populateParam","setCurrentValue","tablist","_loop","v","toString","currentValue","split","changeValueAsync","join","matchListener","updateParam","newValue","values","options","opt","apply","resetListeners","createList","data","row","formattedValue","filter","item","array","indexOf","i","a","Number","toLocaleString","environment","locale","unshift","addEventListener","TableauEventType","FilterChanged","MarkSelectionChanged","ParameterChanged","updateParameter","_i","_unregister","fn","registerListeners","document","body","findParameter","initializeAsync","multi","flexDirection","multiple","marginTop","single","fontSize","Home","href","PrimaryLayout","react_router","path","exact","component","App","react_router_dom","src_PrimaryLayout","ReactDOM","src_App","getElementById"],"mappings":"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","file":"static/js/main.e0289818.chunk.js","sourcesContent":["import * as React from 'react';\r\nimport { Button } from '@tableau/tableau-ui';\r\n\r\nexport interface SelectedProps {\r\n    nextConfig?: boolean;\r\n    onClear: () => void;\r\n    selected: string;\r\n    selecting: string;\r\n}\r\n\r\n// An individual setting that has been set\r\nexport const Selected: React.SFC<SelectedProps> = (props) => {\r\n    return (\r\n        <div className='selected'>\r\n            <p><i>The {props.selecting} <b>{props.selected}</b> has been selected</i></p>\r\n            <Button onClick={props.onClear} style={{ visibility: props.nextConfig ? 'hidden' : 'visible', marginLeft: '12px' }}>Clear</Button>\r\n        </div>\r\n    );\r\n};\r\n\r\nSelected.displayName = 'Selected';\r\n","import * as React from 'react';\r\nimport { Button, ButtonProps, DropdownSelect, DropdownSelectProps } from '@tableau/tableau-ui';\r\n\r\nexport interface SelectorProps {\r\n    enabled: boolean;\r\n    list: string[];\r\n    onChange: (e: React.ChangeEvent<HTMLSelectElement>) => void;\r\n    onClick: () => void;\r\n    selected: string;\r\n}\r\n\r\n// Shows if setting has not yet been configured\r\nexport const Selector: React.SFC<SelectorProps> = (props) => {\r\n    const dropdownSelectProps: DropdownSelectProps = {\r\n        className: 'dropdown-select',\r\n        disabled: !props.enabled,\r\n        kind: 'line',\r\n        onChange: props.onChange,\r\n        onSelect: props.onChange,\r\n        value: props.selected,\r\n    };\r\n\r\n    const buttonProps: ButtonProps = {\r\n        disabled: !props.enabled || props.selected === '',\r\n        kind: 'filledGreen',\r\n        onClick: props.onClick,\r\n        style: { marginLeft: '12px' },\r\n    };\r\n\r\n    return (\r\n        <div className='selector'>\r\n            <DropdownSelect {...dropdownSelectProps}>\r\n                {props.list.map(option => <option key={option}>{option}</option>)}\r\n            </DropdownSelect>\r\n            <Button {...buttonProps}>Set</Button>\r\n        </div>\r\n    );\r\n};\r\n\r\nSelector.displayName = 'Selector';\r\n","import * as React from 'react';\r\nimport { Selected } from './Selected';\r\nimport { Selector } from './Selector';\r\n\r\nexport interface SettingProps {\r\n    config: boolean;\r\n    enabled: boolean;\r\n    list: string[];\r\n    nextConfig?: boolean;\r\n    onChange: (e: React.ChangeEvent<HTMLSelectElement>) => void;\r\n    onClear: () => void;\r\n    onClick: () => void;\r\n    selected: string;\r\n    selecting: string;\r\n}\r\n\r\nexport const Setting: React.SFC<SettingProps> = (props) => {\r\n    return (\r\n        <React.Fragment>\r\n            <span>Select a {props.selecting}</span>\r\n            {renderSelectElement(props)}\r\n        </React.Fragment>\r\n    );\r\n};\r\n\r\nSetting.displayName = 'Setting';\r\n\r\nfunction renderSelectElement(props: SettingProps): JSX.Element {\r\n    const { config, enabled, list, nextConfig, onChange, onClear, onClick, selected, selecting } = props;\r\n\r\n    return config ? <Selected nextConfig={nextConfig} onClear={onClear} selected={selected} selecting={selecting} /> :\r\n        <Selector enabled={enabled} list={list} onChange={onChange} onClick={onClick} selected={selected} />;\r\n}\r\n","import * as React from 'react';\r\nimport { Button, Checkbox, DropdownSelect, Radio, Tabs, TextField } from '@tableau/tableau-ui';\r\nimport { Setting } from './Setting';\r\nconst tableau = window.tableau;\r\n\r\ninterface State {\r\n    allLabel: string,\r\n    applyButton: boolean,\r\n    applyButtonLabel: string,\r\n    autoUpdate: boolean,\r\n    bg: string,\r\n    configured: boolean,\r\n    dataType: string,\r\n    delimiter: string,\r\n    displayField: string,\r\n    field: string,\r\n    field_config: boolean,\r\n    field_enabled: boolean,\r\n    field_list: string[],\r\n    updateOnSelection: boolean,\r\n    includeAllValue: boolean,\r\n    listenParam: boolean,\r\n    listenParamName: string,\r\n    listenParamList: string[],\r\n    matchParam: boolean,\r\n    multiselect: boolean,\r\n    param_config: boolean,\r\n    param_enabled: boolean,\r\n    param_list: string[],\r\n    parameter: string,\r\n    selectedTabIndex: number;\r\n    showDisplayValues: boolean,\r\n    sort: string,\r\n    txt: string,\r\n    updateOnChange: boolean,\r\n    useFormattedValues: boolean,\r\n    worksheet: string,\r\n    ws_config: boolean,\r\n    ws_enabled: boolean,\r\n    ws_list: string[],\r\n}\r\n\r\nconst Loading: string = 'Loading...';\r\nconst NoFieldsFound: string = 'No fields found that match parameter!';\r\nconst NoWorksheetsFound: string = 'No worksheets found!';\r\nconst NoParametersFound: string = 'No open input parameters found!';\r\n\r\nclass Configure extends React.Component<any, State> {\r\n    public readonly state: State = {\r\n        allLabel: '(All)',\r\n        applyButton: false,\r\n        applyButtonLabel: 'Apply',\r\n        autoUpdate: false,\r\n        bg: '#ffffff',\r\n        configured: false,\r\n        dataType: 'string',\r\n        delimiter: '|',\r\n        displayField: '',\r\n        field: '',\r\n        field_config: false,\r\n        field_enabled: false,\r\n        field_list: [],\r\n        updateOnSelection: false,\r\n        includeAllValue: false,\r\n        listenParam: false,\r\n        listenParamName: '',\r\n        listenParamList: [],\r\n        matchParam: false,\r\n        multiselect: false,\r\n        param_config: false,\r\n        param_enabled: false,\r\n        param_list: [],\r\n        parameter: '',\r\n        selectedTabIndex: 0,\r\n        showDisplayValues: false,\r\n        sort: 'asc',\r\n        txt: '#333333',\r\n        updateOnChange: false,\r\n        useFormattedValues: false,\r\n        worksheet: '',\r\n        ws_config: false,\r\n        ws_enabled: false,\r\n        ws_list: [],\r\n    };\r\n\r\n    // Handles change in background color input\r\n    public bgChange = (color: any): void => {\r\n        this.setState({ bg: color.target.value });\r\n    };\r\n\r\n    // Handles change in text color input\r\n    public txtChange = (color: any): void => {\r\n        this.setState({ txt: color.target.value });\r\n    };\r\n\r\n    // Handles selection in parameter dropdown\r\n    public paramChange = (e: React.ChangeEvent<HTMLSelectElement>): void => {\r\n        this.setState({ parameter: e.target.value });\r\n    };\r\n\r\n    // Handles selection in field dropdown\r\n    public fieldChange = (e: React.ChangeEvent<HTMLSelectElement>): void => {\r\n        this.setState({ field: e.target.value });\r\n    };\r\n\r\n    // Handles selection in worksheet dropdown\r\n    public wsChange = (e: React.ChangeEvent<HTMLSelectElement>): void => {\r\n        this.setState({ worksheet: e.target.value });\r\n    };\r\n\r\n    // Handles change in sort checkbox\r\n    public sortChange = (e: React.ChangeEvent<HTMLInputElement>): void => {\r\n        this.setState({ sort: e.target.value });\r\n    };\r\n\r\n    // Handles change in delimiter textbox\r\n    public textInputChange = (e: React.ChangeEvent<HTMLInputElement>): void => {\r\n        this.setState({ [e.target.name]: e.target.value } as any);\r\n    };\r\n\r\n    // Handles change in auto update checkbox\r\n    public checkboxChange = (e: React.ChangeEvent<HTMLInputElement>): void => {\r\n        this.setState({ [e.target.name]: e.target.checked } as any);\r\n    };\r\n\r\n    // Handles selection in display values dropdown\r\n    public listInputChange = (e: React.ChangeEvent<HTMLSelectElement>): void => {\r\n        this.setState({ [e.target.name]: e.target.value } as any);\r\n    };\r\n\r\n    // Handles change in options tabs   \r\n    public tabChange = (index: any): void => {\r\n        this.setState({ selectedTabIndex: index });\r\n    };\r\n\r\n    // Tests if extension is configured and if so, if the parameter in settings exists and accepts all values\r\n    public testParamSettings() {\r\n        const dashboard = tableau.extensions.dashboardContent.dashboard;\r\n        const settings = tableau.extensions.settings.getAll();\r\n        if (this.state.configured) {\r\n            dashboard.findParameterAsync(settings.selParam).then((param: any) => {\r\n                if (param && param.allowableValues.type === 'all') {\r\n                    this.setState({\r\n                        dataType: param.dataType,\r\n                        param_config: true,\r\n                        parameter: param.name,\r\n                    });\r\n                    this.testWSSettings();\r\n                } else {\r\n                    this.populateParamList();\r\n                    this.setState({ configured: false });\r\n                }\r\n            })\r\n        } else {\r\n            this.populateParamList();\r\n        }\r\n    }\r\n\r\n    // Gets list of parameters in workbook and populates dropdown\r\n    public populateParamList() {\r\n        const dashboard = tableau.extensions.dashboardContent.dashboard;\r\n        this.setState({\r\n            param_list: [Loading],\r\n            parameter: Loading,\r\n        });\r\n        dashboard.getParametersAsync().then((params: any) => {\r\n            const dropdownList: string[] = [];\r\n            for (const p of params) {\r\n                if (p.allowableValues.type === 'all') {\r\n                    dropdownList.push(p.name);\r\n                }\r\n            }\r\n            dropdownList.sort();\r\n            if (dropdownList.length > 0) {\r\n                this.setState({\r\n                    param_enabled: true,\r\n                    param_list: dropdownList,\r\n                    parameter: dropdownList[0],\r\n                });\r\n            } else {\r\n                this.setState({\r\n                    param_enabled: false,\r\n                    param_list: [NoParametersFound],\r\n                    parameter: NoParametersFound,\r\n                });\r\n            }\r\n        });\r\n    }\r\n\r\n    // Sets which tableau parameter to update\r\n    public setParam = (): void => {\r\n        const dashboard = tableau.extensions.dashboardContent.dashboard;\r\n        if (this.state.parameter !== '') {\r\n            dashboard.findParameterAsync(this.state.parameter).then((param: any) => {\r\n                this.setState({\r\n                    dataType: param.dataType,\r\n                    includeAllValue: (param.dataType === 'string' ? this.state.includeAllValue : false),\r\n                    multiselect: (param.dataType === 'string' ? this.state.multiselect : false),\r\n                    param_config: true,\r\n                });\r\n                this.populateWS();\r\n            });\r\n        }\r\n    }\r\n\r\n    // Clears setting for which tableau parameter to update\r\n    public clearParam = (): void => {\r\n        this.setState({\r\n            param_config: false,\r\n            param_enabled: true,\r\n            ws_enabled: false,\r\n        });\r\n        this.populateParamList();\r\n    }\r\n\r\n    // Tests if extension is configured and if so, if the worksheet in settings exists\r\n    public testWSSettings() {\r\n        const dashboard = tableau.extensions.dashboardContent.dashboard;\r\n        const settings = tableau.extensions.settings.getAll();\r\n        if (this.state.configured) {\r\n            if (dashboard.worksheets.find((ws: any) => ws.name === settings.selWorksheet)) {\r\n                this.setState({\r\n                    worksheet: settings.selWorksheet,\r\n                    ws_config: true,\r\n                    ws_enabled: false,\r\n                });\r\n                this.testFieldSettings();\r\n            } else {\r\n                this.populateWS();\r\n                this.setState({ configured: false });\r\n            }\r\n        } else {\r\n            this.populateWS();\r\n        }\r\n    }\r\n\r\n    // Gets list of worksheets in dashboard and populates dropdown\r\n    public populateWS() {\r\n        const dashboard = tableau.extensions.dashboardContent.dashboard;\r\n        this.setState({\r\n            worksheet: Loading,\r\n            ws_list: [Loading],\r\n        });\r\n        const dropdownList: string[] = [];\r\n        for (const ws of dashboard.worksheets) {\r\n            dropdownList.push(ws.name);\r\n        }\r\n        dropdownList.sort();\r\n        if (dropdownList.length > 0) {\r\n            this.setState({\r\n                worksheet: dropdownList[0],\r\n                ws_enabled: true,\r\n                ws_list: dropdownList,\r\n            });\r\n        } else {\r\n            this.setState({\r\n                worksheet: NoWorksheetsFound,\r\n                ws_enabled: false,\r\n                ws_list: [NoWorksheetsFound],\r\n            });\r\n        }\r\n    }\r\n\r\n    // Sets which worksheet to use for filters\r\n    public setWS = (): void => {\r\n        if (this.state.worksheet !== '') {\r\n            this.setState({ ws_config: true });\r\n            this.populateFieldList();\r\n        }\r\n    }\r\n\r\n    // Clears setting for which worksheet to use for filters\r\n    public clearWS = (): void => {\r\n        this.setState({\r\n            field_enabled: false,\r\n            ws_config: false,\r\n            ws_enabled: true,\r\n        });\r\n        this.populateWS();\r\n    }\r\n\r\n    // Tests if extension is configued and if so, if the field in settings exists on the selected worksheet\r\n    public testFieldSettings() {\r\n        const dashboard = tableau.extensions.dashboardContent.dashboard;\r\n        const settings = tableau.extensions.settings.getAll();\r\n        if (this.state.configured) {\r\n            dashboard.worksheets.find((w: any) => w.name === this.state.worksheet).getSummaryDataAsync().then((dataTable: any) => {\r\n                if (dataTable.columns.find((column: any) => column.fieldName === settings.selField)) {\r\n                    const dropdownList: string[] = [];\r\n                    for (const f of dataTable.columns) {\r\n                        dropdownList.push(f.fieldName);\r\n                    }\r\n                    dropdownList.sort();\r\n                    this.setState({\r\n                        configured: true,\r\n                        field: settings.selField,\r\n                        field_config: true,\r\n                        field_enabled: false,\r\n                        field_list: dropdownList,\r\n                    });\r\n                } else {\r\n                    this.populateFieldList();\r\n                    this.setState({ configured: false });\r\n                }\r\n            });\r\n        } else {\r\n            this.populateFieldList();\r\n        }\r\n    }\r\n\r\n    // Gets list of fields in previously selected worksheet's data and populates dropdown\r\n    public populateFieldList() {\r\n        const dashboard = tableau.extensions.dashboardContent.dashboard;\r\n        this.setState({\r\n            field: Loading,\r\n            field_list: [Loading],\r\n        });\r\n        let dataType: string;\r\n        dashboard.findParameterAsync(this.state.parameter).then((param: any) => {\r\n            dataType = param.dataType;\r\n            return dashboard.worksheets.find((w: any) => w.name === this.state.worksheet).getSummaryDataAsync();\r\n        })\r\n            .then((dataTable: any) => {\r\n                const dropdownList: string[] = [];\r\n                for (const f of dataTable.columns) {\r\n                    if (f.dataType === dataType) {\r\n                        dropdownList.push(f.fieldName);\r\n                    }\r\n                }\r\n                dropdownList.sort();\r\n                if (dropdownList.length > 0) {\r\n                    this.setState({\r\n                        field: dropdownList[0],\r\n                        field_enabled: true,\r\n                        field_list: dropdownList,\r\n                    });\r\n                } else {\r\n                    this.setState({\r\n                        field: NoFieldsFound,\r\n                        field_enabled: false,\r\n                        field_list: [NoFieldsFound],\r\n                    });\r\n                }\r\n            });\r\n    }\r\n\r\n    // Sets the field to pull values from for Data-Driven Parameter\r\n    public setField = (): void => {\r\n        const dashboard = tableau.extensions.dashboardContent.dashboard;\r\n        if (this.state.field !== '') {\r\n            this.setState({\r\n                configured: true,\r\n                field_config: true,\r\n            });\r\n        }\r\n\r\n        // For display values list\r\n        dashboard.worksheets.find((w: any) => w.name === this.state.worksheet).getSummaryDataAsync().then((dataTable: any) => {\r\n            const dropdownList: string[] = [];\r\n            for (const f of dataTable.columns) {\r\n                dropdownList.push(f.fieldName);\r\n            }\r\n            dropdownList.sort();\r\n            this.setState({\r\n                displayField: dropdownList[0],\r\n                field_list: dropdownList,\r\n            });\r\n        });\r\n    }\r\n\r\n    // Clears the field to pull values from for Data-Driven Parameter\r\n    public clearField = (): void => {\r\n        this.setState({\r\n            configured: false,\r\n            field_config: false,\r\n            field_enabled: true,\r\n        });\r\n        this.populateFieldList();\r\n    }\r\n\r\n    // Saves settings and closes configure dialog\r\n    public submit = (): void => {\r\n        tableau.extensions.settings.set('allLabel', this.state.allLabel);\r\n        tableau.extensions.settings.set('applyButton', this.state.applyButton && this.state.multiselect);\r\n        tableau.extensions.settings.set('applyButtonLabel', this.state.applyButtonLabel);\r\n        tableau.extensions.settings.set('autoUpdate', this.state.autoUpdate);\r\n        tableau.extensions.settings.set('bg', this.state.bg);\r\n        tableau.extensions.settings.set('configured', 'true');\r\n        tableau.extensions.settings.set('dataType', this.state.dataType || 'string');\r\n        tableau.extensions.settings.set('delimiter', this.state.delimiter);\r\n        tableau.extensions.settings.set('displayField', this.state.displayField);\r\n        tableau.extensions.settings.set('includeAllValue', this.state.includeAllValue && this.state.dataType === 'string');\r\n        tableau.extensions.settings.set('listenParam', this.state.listenParam);\r\n        tableau.extensions.settings.set('listenParamName', this.state.listenParamName);\r\n        tableau.extensions.settings.set('matchParam', this.state.matchParam);\r\n        tableau.extensions.settings.set('multiselect', this.state.multiselect && this.state.dataType === 'string');\r\n        tableau.extensions.settings.set('selField', this.state.field);\r\n        tableau.extensions.settings.set('selParam', this.state.parameter);\r\n        tableau.extensions.settings.set('selWorksheet', this.state.worksheet);\r\n        tableau.extensions.settings.set('showDisplayValues', this.state.showDisplayValues);\r\n        tableau.extensions.settings.set('sort', this.state.sort);\r\n        tableau.extensions.settings.set('txt', this.state.txt);\r\n        tableau.extensions.settings.set('updateOnChange', this.state.updateOnChange);\r\n        tableau.extensions.settings.set('updateOnSelection', this.state.updateOnSelection);\r\n        tableau.extensions.settings.set('useFormattedValues', this.state.useFormattedValues && this.state.dataType === 'string');\r\n        tableau.extensions.settings.saveAsync().then(() => {\r\n            tableau.extensions.ui.closeDialog(this.state.worksheet);\r\n        });\r\n    }\r\n\r\n    // Clears settings and states\r\n    public clearSettings = (): void => {\r\n        this.setState({\r\n            configured: false,\r\n            displayField: '',\r\n            field: '',\r\n            field_config: false,\r\n            field_enabled: false,\r\n            field_list: [],\r\n            param_config: false,\r\n            param_list: [],\r\n            parameter: '',\r\n            showDisplayValues: false,\r\n            worksheet: '',\r\n            ws_config: false,\r\n            ws_enabled: false,\r\n            ws_list: [],\r\n        });\r\n        this.populateParamList();\r\n    }\r\n\r\n    // Once we have mounted, we call to initialize\r\n    public componentWillMount() {\r\n        tableau.extensions.initializeDialogAsync().then(() => {\r\n            const settings = tableau.extensions.settings.getAll();\r\n            const dashboard = tableau.extensions.dashboardContent.dashboard;\r\n            // Grab parameters for options\r\n            dashboard.getParametersAsync().then((params: any) => {\r\n                const dropdownList: string[] = [];\r\n                for (const p of params) {\r\n                    dropdownList.push(p.name);\r\n                }\r\n                dropdownList.sort();\r\n                this.setState({\r\n                    listenParamList: dropdownList,\r\n                });\r\n            });\r\n\r\n            if (settings.configured === 'true') {\r\n                this.setState({\r\n                    allLabel: settings.allLabel || '(All)',\r\n                    applyButton: settings.applyButton === 'true' || false,\r\n                    applyButtonLabel: settings.applyButtonLabel || 'Apply',\r\n                    autoUpdate: settings.autoUpdate === 'true' || false,\r\n                    bg: settings.bg || '#ffffff',\r\n                    configured: true,\r\n                    dataType: settings.dataType,\r\n                    delimiter: settings.delimiter || '|',\r\n                    displayField: settings.displayField || '',\r\n                    includeAllValue: settings.includeAllValue === 'true' || false,\r\n                    listenParam: settings.listenParam === 'true' || false,\r\n                    listenParamName: settings.listenParamName || '',\r\n                    matchParam: settings.matchParam === 'true' || false,\r\n                    multiselect: settings.multiselect === 'true' || false,\r\n                    showDisplayValues: settings.showDisplayValues === 'true' || false,\r\n                    sort: settings.sort || 'asc',\r\n                    txt: settings.txt || '#333333',\r\n                    updateOnChange: settings.updateOnChange === 'true' || false,\r\n                    updateOnSelection: settings.updateOnSelection === 'true' || false,\r\n                    useFormattedValues: settings.useFormattedValues === 'true' || false,\r\n                });\r\n                this.testParamSettings();\r\n            } else {\r\n                this.populateParamList();\r\n            }\r\n        });\r\n    }\r\n\r\n    public render() {\r\n        const configuration = <div className='content'>\r\n            <Setting selecting='parameter' onClick={this.setParam} onClear={this.clearParam} config={this.state.param_config} nextConfig={this.state.ws_config} selected={this.state.parameter} enabled={this.state.param_enabled && !this.state.param_config} list={this.state.param_list} onChange={this.paramChange} />\r\n            <Setting selecting='worksheet' onClick={this.setWS} onClear={this.clearWS} config={this.state.ws_config} nextConfig={this.state.field_config} selected={this.state.worksheet} enabled={this.state.ws_enabled} list={this.state.ws_list} onChange={this.wsChange} />\r\n            <Setting selecting='field' onClick={this.setField} onClear={this.clearField} config={this.state.field_config} selected={this.state.field} enabled={this.state.field_enabled} list={this.state.field_list} onChange={this.fieldChange} />\r\n        </div>;\r\n\r\n        const options = <div className='content'>\r\n            <div className='option'>\r\n                Sorting:\r\n                <Radio checked={this.state.sort === 'asc'} onChange={this.sortChange} name='sorting' value='asc' style={{ margin: '0px 12px' }}>Ascending (A-Z)</Radio>\r\n                <Radio checked={this.state.sort === 'desc'} onChange={this.sortChange} name='sorting' value='desc' style={{ margin: '0px 12px' }}>Descending (Z-A)</Radio>\r\n            </div>\r\n            <div className='option'>\r\n                <Checkbox name='updateOnSelection' checked={this.state.updateOnSelection} onChange={this.checkboxChange} style={{ flexGrow: 1 }}>Filter list based on worksheet selections</Checkbox>\r\n            </div>\r\n            <div className='option'>\r\n                <Checkbox name='autoUpdate' checked={this.state.autoUpdate} onChange={this.checkboxChange} style={{ flexGrow: 1 }}>Automatically reset values on dashboard load.</Checkbox>\r\n            </div>\r\n            <div className='option'>\r\n                <Checkbox name='updateOnChange' disabled={this.state.multiselect} checked={this.state.updateOnChange} onChange={this.checkboxChange} style={{ flexGrow: 1 }}>Update list of values after selection is made. (Dropdown only)</Checkbox>\r\n            </div>\r\n            <div className='option'>\r\n                <Checkbox name='matchParam' checked={this.state.matchParam} onChange={this.checkboxChange} style={{ flexGrow: 1 }}>Update selection if source parameter changes.</Checkbox>\r\n            </div>\r\n            <div className='option'>\r\n                <Checkbox name='listenParam' disabled={!this.state.param_config} checked={this.state.listenParam} onChange={this.checkboxChange} style={{ marginRight: '10px' }}>Update list when a parameter changes.</Checkbox>\r\n                <div style={{ display: 'flex', width: '150px' }}>\r\n                    <DropdownSelect name='listenParamName' className='dropdown-select' disabled={!this.state.listenParam || !this.state.param_config} kind='line' onChange={this.listInputChange} value={this.state.listenParamName} style={{ flexGrow: 1 }}>\r\n                        {this.state.listenParamList.map(option => {\r\n                            if (option !== this.state.parameter) {\r\n                                return <option key={option}>{option}</option>\r\n                            } else {\r\n                                return false\r\n                            }\r\n                        })}\r\n                    </DropdownSelect>\r\n                </div>\r\n            </div>\r\n            <div className='option'>\r\n                <Checkbox name='showDisplayValues' disabled={!this.state.field_config} checked={this.state.showDisplayValues} onChange={this.checkboxChange} style={{ marginRight: '10px' }}>Use different field for display values</Checkbox>\r\n                <div style={{ display: 'flex', width: '150px' }}>\r\n                    <DropdownSelect name='displayField' className='dropdown-select' disabled={!this.state.showDisplayValues || !this.state.field_config} kind='line' onChange={this.listInputChange} value={this.state.displayField} style={{ flexGrow: 1 }}>\r\n                        {this.state.field_list.map(option => <option key={option}>{option}</option>)}\r\n                    </DropdownSelect>\r\n                </div>\r\n            </div>\r\n            <div className='option'>\r\n                <p><i>For use with string parameters only:</i></p>\r\n            </div>\r\n            <div className='option'>\r\n                <Checkbox name='useFormattedValues' disabled={this.state.dataType !== 'string'} checked={this.state.useFormattedValues && this.state.dataType === 'string'} onChange={this.checkboxChange} style={{ flexGrow: 1 }}>Use aliased values</Checkbox>\r\n            </div>\r\n            <div className='option'>\r\n                <Checkbox name='includeAllValue' disabled={this.state.dataType !== 'string'} checked={this.state.includeAllValue && this.state.dataType === 'string'} onChange={this.checkboxChange} style={{ marginRight: '10px' }}>Include \"(All)\" in parameter list</Checkbox>\r\n                <span children='Label:' style={{ marginRight: '5px', color: this.state.dataType !== 'string' || !this.state.includeAllValue ? 'rgba(0, 0, 0, 0.35)' : 'inherit' }} />\r\n                <TextField name='allLabel' kind='line' onChange={this.textInputChange} className='delimiter-text-field' value={this.state.allLabel} disabled={this.state.dataType !== 'string' || !this.state.includeAllValue} maxLength={20} style={{ width: 150 }} />\r\n\r\n            </div>\r\n            <p style={{ marginLeft: '20px' }}><i>Note: This is only a placeholder for calculations.</i></p>\r\n            <div className='option'>\r\n                <Checkbox name='multiselect' disabled={this.state.dataType !== 'string'} checked={this.state.multiselect && this.state.dataType === 'string'} onChange={this.checkboxChange} style={{ marginRight: '10px' }}>Allow for multiple selections.</Checkbox>\r\n                <span children='Delimiter:' style={{ marginRight: '5px', color: !this.state.multiselect ? 'rgba(0, 0, 0, 0.35)' : 'inherit' }} />\r\n                <TextField name='delimiter' kind='line' onChange={this.textInputChange} className='delimiter-text-field' value={this.state.delimiter} disabled={!this.state.multiselect || this.state.dataType !== 'string'} maxLength={1} style={{ width: 20 }} />\r\n            </div>\r\n            <div className='option'>\r\n                <Checkbox name='applyButton' disabled={!this.state.multiselect} checked={this.state.applyButton && this.state.multiselect} onChange={this.checkboxChange} style={{ marginRight: '10px' }}>Show apply button.</Checkbox>\r\n                <span children='Label:' style={{ marginRight: '5px', color: !this.state.multiselect || !this.state.applyButton ? 'rgba(0, 0, 0, 0.35)' : 'inherit' }} />\r\n                <TextField name='applyButtonLabel' kind='line' onChange={this.textInputChange} className='delimiter-text-field' value={this.state.applyButtonLabel} disabled={!this.state.multiselect || !this.state.applyButton} maxLength={20} style={{ width: 150 }} />\r\n            </div>\r\n        </div>;\r\n\r\n        const formatting = <div className='content'>\r\n            <div className='format'>\r\n                <div className='formattext'>Background Color</div>\r\n                <div>\r\n                    <input type='color' value={this.state.bg} onChange={this.bgChange} style={{ backgroundColor: this.state.bg }} />\r\n                </div>\r\n            </div>\r\n            <div className='format'>\r\n                <div className='formattext'>Text Color</div>\r\n                <div>\r\n                    <input type='color' value={this.state.txt} onChange={this.txtChange} style={{ backgroundColor: this.state.txt }} />\r\n                </div>\r\n            </div>\r\n        </div>;\r\n\r\n        const panels = [configuration, options, formatting];\r\n        const tabs = [{ content: 'Configure' }, { content: 'Options' }, { content: 'Formatting' }];\r\n        // const initialState = { selectedTabIndex: 0 };\r\n\r\n        return (\r\n            <React.Fragment>\r\n                <div className='container'>\r\n                    <div>\r\n                        <div className='header'>\r\n                            Data-Driven Parameter Configuration\r\n                            <div className='tooltip'>\r\n                                <svg xmlns='http://www.w3.org/2000/svg' id='Dialogs_x5F_Info' width='15' height='15' viewBox='0 0 15 15'>\r\n                                    <rect id='Line' x='7' y='6' width='1' height='5' fillRule='evenodd' clipRule='evenodd' fill='#666766' />\r\n                                    <rect id='Dot_2_' x='7' y='4' width='1' height='1' fillRule='evenodd' clipRule='evenodd' fill='#666766' />\r\n                                    <path id='Circle' d='M7.5,1C3.9,1,1,3.9,1,7.5S3.9,14,7.5,14 S14,11.1,14,7.5S11.1,1,7.5,1z M7.5,13C4.5,13,2,10.5,2,7.5C2,4.5,4.5,2,7.5,2S13,4.5,13,7.5C13,10.5,10.5,13,7.5,13z' fillRule='evenodd' clipRule='evenodd' fill='#666766' />\r\n                                </svg>\r\n                                <span className='tooltiptext'>\r\n                                    <b>How to Use</b>\r\n                                    <ol>\r\n                                        <li>Select a Tableau parameter to manipulate. This parameter must already exists and must allow \"all\" values.</li>\r\n                                        <li>Select a worksheet with the data you want to use in your parameter.</li>\r\n                                        <li>Select a field to use to populate the parameter. Field data type must match the data type of parameter.</li>\r\n                                    </ol>\r\n                                    <br />\r\n                                    <p>Note: Mac Desktop 2018.3 and lower, please use arrow keys and 'Enter' to select options</p>\r\n                                </span>\r\n                            </div>\r\n                        </div>\r\n                        <div className='tabs'>\r\n                            <Tabs activation='automatic' alignment='left' onTabChange={this.tabChange} selectedTabIndex={this.state.selectedTabIndex} tabs={tabs}>\r\n                                {panels[this.state.selectedTabIndex]}\r\n                            </Tabs>\r\n                        </div>\r\n                    </div>\r\n\r\n                    <div className='footer'>\r\n                        <div className='btncluster'>\r\n                            <Button onClick={this.clearSettings} style={{ marginRight: 'auto' }}>Clear Settings</Button>\r\n                            <Button kind='filledGreen' onClick={this.submit} disabled={!this.state.configured || !this.state.ws_config} style={{ marginLeft: '12px' }}>OK</Button>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </React.Fragment>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Configure;\r\n","import * as React from 'react';\r\nimport './style.css';\r\nimport { Button, DropdownSelect } from '@tableau/tableau-ui';\r\nconst tableau = window.tableau;\r\n\r\nlet unregister = [() => { }, () => { }, () => { }, () => { }];\r\n\r\ninterface State {\r\n    allLabel: string,\r\n    applyButton: boolean,\r\n    applyButtonLabel: string,\r\n    bg: string,\r\n    configured: boolean,\r\n    currentVal: any[],\r\n    disabled: boolean,\r\n    firstInit: boolean,\r\n    list: any[],\r\n    multiselect: boolean,\r\n}\r\n\r\nconst NeedsConfiguring: any = { value: 'Parameter needs configuration', displayValue: 'Parameter needs configuration' };\r\nconst Loading: any = { value: 'Loading...', displayValue: 'Loading...' };\r\n\r\nfunction fakeWhiteOverlay(hex: string) {\r\n    const rgb = hexToRgb(hex);\r\n    if (rgb) {\r\n        return `rgb(${Math.min(Math.floor(rgb.r / 2) + 127, 255)}, ${Math.min(Math.floor(rgb.g / 2) + 127, 255)}, ${Math.min(Math.floor(rgb.b / 2) + 127, 255)})`;\r\n    } else {\r\n        return '#ffffff';\r\n    }\r\n}\r\n\r\nfunction hexToRgb(hex: string) {\r\n    const result = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i.exec(hex);\r\n    return result ? {\r\n        b: parseInt(result[3], 16),\r\n        g: parseInt(result[2], 16),\r\n        r: parseInt(result[1], 16),\r\n    } : null;\r\n}\r\n\r\nclass DataDrivenParameter extends React.Component<any, State> {\r\n    public readonly state: State = {\r\n        allLabel: 'Apply',\r\n        applyButton: false,\r\n        applyButtonLabel: '(All)',\r\n        bg: '#ffffff',\r\n        configured: false,\r\n        currentVal: [Loading],\r\n        disabled: true,\r\n        firstInit: true,\r\n        list: [Loading],\r\n        multiselect: false,\r\n    };\r\n\r\n    // Pops open the configure page\r\n    public configure = (): void => {\r\n        const popupUrl = `${window.location.origin}${process.env.PUBLIC_URL}/#/config`;\r\n        const payload = '';\r\n        tableau.extensions.ui.displayDialogAsync(popupUrl, payload, { height: 610, width: 450 }).then((closePayload: string) => {\r\n            this.setup();\r\n        }).catch((error: any) => {\r\n            if (tableau.extensions.settings.get('configured') !== 'true') {\r\n                this.setState({\r\n                    currentVal: [NeedsConfiguring],\r\n                    disabled: true,\r\n                    list: [NeedsConfiguring],\r\n                });\r\n            }\r\n            switch (error.errorCode) {\r\n                case tableau.ErrorCodes.DialogClosedByUser:\r\n                    console.log('Dialog was closed by user.');\r\n                    break;\r\n                default:\r\n                    console.error(error.message);\r\n            }\r\n        });\r\n    }\r\n\r\n    // Locates the parameter to update\r\n    public findParameter() {\r\n        const settings = tableau.extensions.settings.getAll();\r\n        const dashboard = tableau.extensions.dashboardContent.dashboard;\r\n        dashboard.findParameterAsync(settings.selParam).then((parameter: any) => {\r\n            if (!parameter || parameter.allowableValues.type !== 'all') {\r\n                this.setState({\r\n                    currentVal: [NeedsConfiguring],\r\n                    disabled: true,\r\n                    list: [NeedsConfiguring],\r\n                });\r\n            } else {\r\n                this.getParamData();\r\n                this.resetListeners();\r\n            }\r\n        });\r\n    }\r\n\r\n    // Gets the values from the selected field\r\n    public getParamData = (): void => {\r\n        const settings = tableau.extensions.settings.getAll();\r\n        const dashboard = tableau.extensions.dashboardContent.dashboard;\r\n        const worksheet = dashboard.worksheets.find((ws: any) => ws.name === settings.selWorksheet);\r\n        if (!worksheet) {\r\n            this.setState({\r\n                currentVal: [NeedsConfiguring],\r\n                disabled: true,\r\n                list: [NeedsConfiguring],\r\n            });\r\n        } else {\r\n            worksheet.getSummaryDataAsync({ ignoreSelection: settings.ignoreSelection === 'true' }).then((dataTable: any) => {\r\n                this.populateParam(dataTable);\r\n            });\r\n        }\r\n    }\r\n\r\n    // Pulls domain of selected field\r\n    public populateParam(dataTable: any) {\r\n        const settings = tableau.extensions.settings.getAll();\r\n        const field = dataTable.columns.find((column: any) => column.fieldName === settings.selField);\r\n        this.setState({\r\n            currentVal: [Loading],\r\n            disabled: true,\r\n            list: [Loading],\r\n        });\r\n\r\n        if (!field) {\r\n            this.setState({\r\n                currentVal: [NeedsConfiguring],\r\n                disabled: true,\r\n                list: [NeedsConfiguring],\r\n            });\r\n        } else {\r\n            this.createList(field, dataTable);\r\n        }\r\n    }\r\n\r\n    // Populate list with values from data source\r\n    public createList(field: any, dataTable: any) {\r\n        const settings = tableau.extensions.settings.getAll();\r\n        const displayField = dataTable.columns.find((column: any) => column.fieldName === settings.displayField);\r\n\r\n        let list: any[] = [];\r\n        for (const row of dataTable.data) {\r\n            const value = settings.useFormattedValues === 'true' ? row[field.index].formattedValue : row[field.index].value;\r\n            let displayValue = value;\r\n            if (displayField && settings.showDisplayValues === 'true') {\r\n                displayValue = row[displayField.index].formattedValue\r\n            }\r\n            list.push({\r\n                displayValue,\r\n                value,\r\n            });\r\n        }\r\n\r\n        // Remove duplicates\r\n        list = list.filter((item, index, array) => array.indexOf(array.find(i => i.value === item.value)) === index);\r\n\r\n        if (settings.dataType && (settings.dataType === 'int' || settings.dataType === 'float')) {\r\n            // Convert to numbers for correct sort\r\n            list = list.map((item) => ({ value: Number(item.value), displayValue: item.displayValue }))\r\n            // Sort according to settings (numerical)\r\n            if (settings.sort && settings.sort === 'desc') {\r\n                list.sort((a, b) => b.value - a.value);\r\n            } else {\r\n                list.sort((a, b) => a.value - b.value);\r\n            }\r\n            if (settings.dataType === 'float') {\r\n                list = list.map((item) => ({ value: item.value.toLocaleString(tableau.extensions.environment.locale), displayValue: item.displayValue }));\r\n            }\r\n        } else {\r\n            // Sort according to settings\r\n            if (settings.sort && settings.sort === 'desc') {\r\n                list.sort((a, b) => a.value < b.value ? 1 : -1);\r\n            } else {\r\n                list.sort((a, b) => a.value > b.value ? 1 : -1);\r\n            }\r\n        }\r\n\r\n        // Add '(All)' according to settings\r\n        if (settings.includeAllValue === 'true') {\r\n            list.unshift({ value: this.state.allLabel, displayValue: this.state.allLabel });\r\n        }\r\n\r\n        this.setState({\r\n            list,\r\n        }, this.setCurrentValue);\r\n\r\n    }\r\n\r\n    // Determine whether to use current param value or first value of list based on settings\r\n    public setCurrentValue = (): void => {\r\n        const settings = tableau.extensions.settings.getAll();\r\n        const dashboard = tableau.extensions.dashboardContent.dashboard;\r\n        const list = this.state.list;\r\n        let currentVal: any[] = [];\r\n        dashboard.findParameterAsync(settings.selParam).then((parameter: any) => {\r\n            if (this.state.firstInit && settings.autoUpdate === 'false') {\r\n                // Then match parameter value\r\n                if (settings.multiselect === 'true') {\r\n                    const tablist = [];\r\n                    for (const value of parameter.currentValue.value.split(settings.delimiter)) {\r\n                        if (list.find((v: any) => v.value.toString() === value || v.value === value)) {\r\n                            tablist.push(value);\r\n                        }\r\n                    }\r\n                    currentVal = tablist;\r\n                } else {\r\n                    if (list.find((v: any) => v.value.toString() === parameter.currentValue.value || v.value === parameter.currentValue.value)) {\r\n                        currentVal = [parameter.currentValue.value];\r\n                    }\r\n                }\r\n                if (currentVal.length > 0) {\r\n                    // If param value is found udate to match\r\n                    this.setState({\r\n                        currentVal,\r\n                    });\r\n                } else {\r\n                    // otherwise push new values\r\n                    currentVal = [(settings.includeAllValue === 'true' ? list[1].value : list[0].value)];\r\n                    parameter.changeValueAsync(settings.multiselect ? currentVal.join(settings.delimiter) : currentVal.toString()).then(console.log);\r\n                }\r\n            } else {\r\n                // Then push new values\r\n                currentVal = [(settings.includeAllValue === 'true' ? list[1].value : list[0].value)];\r\n                parameter.changeValueAsync(settings.multiselect ? currentVal.join(settings.delimiter) : currentVal.toString()).then(console.log);\r\n            }\r\n\r\n            this.setState({\r\n                disabled: false,\r\n                firstInit: false,\r\n            });\r\n        });\r\n    }\r\n\r\n    // Adds event listener to worksheet and parameter\r\n    public async registerListeners() {\r\n        const settings = tableau.extensions.settings.getAll();\r\n        const dashboard = tableau.extensions.dashboardContent.dashboard;\r\n        const worksheet = dashboard.worksheets.find((ws: any) => ws.name === settings.selWorksheet);\r\n        dashboard.findParameterAsync(settings.selParam).then((parameter: any) => {\r\n            if (!worksheet || !parameter) {\r\n                this.setState({\r\n                    currentVal: [NeedsConfiguring],\r\n                    disabled: true,\r\n                    list: [NeedsConfiguring],\r\n                });\r\n            } else {\r\n                unregister[0] = worksheet.addEventListener(tableau.TableauEventType.FilterChanged, this.getParamData);\r\n                unregister[1] = worksheet.addEventListener(tableau.TableauEventType.MarkSelectionChanged, this.getParamData);\r\n                if (settings.matchParam === 'true') {\r\n                    unregister[2] = parameter.addEventListener(tableau.TableauEventType.ParameterChanged, this.matchListener);\r\n                }\r\n                if (settings.listenParam === 'true') {\r\n                    dashboard.findParameterAsync(settings.listenParamName).then((updateParameter: any) => {\r\n                        unregister[3] = updateParameter.addEventListener(tableau.TableauEventType.ParameterChanged, this.getParamData);\r\n                    })\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    public matchListener = (): void => {\r\n        const settings = tableau.extensions.settings.getAll();\r\n        const dashboard = tableau.extensions.dashboardContent.dashboard;\r\n        dashboard.findParameterAsync(settings.selParam).then((parameter: any) => {\r\n            const currentVal = this.state.multiselect ? parameter.currentValue.value.split(settings.delimiter) : [parameter.currentValue.value];\r\n            this.setState({\r\n                currentVal,\r\n            });\r\n        });\r\n    }\r\n\r\n    public resetListeners() {\r\n        for (let fn of unregister) {\r\n            fn();\r\n        }\r\n        this.registerListeners();\r\n    }\r\n\r\n    // Updates the parameter based on selection in Data-Driven Parameter\r\n    public updateParam = (e: any) => {\r\n        const settings = tableau.extensions.settings.getAll();\r\n        const dashboard = tableau.extensions.dashboardContent.dashboard;\r\n        const values: any = [];\r\n        let newValue: any;\r\n        for (const opt of e.target.options) {\r\n            if (opt.selected) {\r\n                values.push(opt.value);\r\n            }\r\n        }\r\n        this.setState({ currentVal: values });\r\n        newValue = values.join(settings.delimiter);\r\n        dashboard.findParameterAsync(settings.selParam).then((parameter: any) => {\r\n            if (!parameter) {\r\n                this.setState({\r\n                    currentVal: [NeedsConfiguring],\r\n                    disabled: true,\r\n                    list: [NeedsConfiguring],\r\n                });\r\n            } else {\r\n                if (settings.applyButton === 'false') {\r\n                    parameter.changeValueAsync(newValue).then(console.log);\r\n                }\r\n            }\r\n\r\n            if (settings.updateOnChange === 'true') {\r\n                // Don't update list if on multi-select, ends up being confusing.\r\n                if (!this.state.multiselect) {\r\n                    this.getParamData();\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    public apply = (): void => {\r\n        const settings = tableau.extensions.settings.getAll();\r\n        const dashboard = tableau.extensions.dashboardContent.dashboard;\r\n        dashboard.findParameterAsync(settings.selParam).then((parameter: any) => {\r\n            parameter.changeValueAsync(this.state.currentVal.join(settings.delimiter)).then(console.log);\r\n        });\r\n    }\r\n\r\n    public setup() {\r\n        const settings = tableau.extensions.settings.getAll();\r\n        document.body.style.backgroundColor = settings.bg;\r\n        document.body.style.color = settings.txt;\r\n        this.setState({\r\n            allLabel: settings.allLabel || '(All)',\r\n            applyButton: settings.applyButton === 'true' || false,\r\n            applyButtonLabel: settings.applyButtonLabel || 'Apply',\r\n            bg: (settings.bg ? fakeWhiteOverlay(settings.bg) : '#ffffff'),\r\n            configured: true,\r\n            multiselect: settings.multiselect === 'true' || false,\r\n        });\r\n        this.findParameter();\r\n    }\r\n\r\n    // Once we have mounted, we call to initialize\r\n    public componentWillMount() {\r\n        tableau.extensions.initializeAsync({ configure: this.configure }).then(() => {\r\n            const settings = tableau.extensions.settings.getAll();\r\n            if (settings.configured === 'true') {\r\n                this.setup();\r\n            } else {\r\n                this.setState({\r\n                    currentVal: [NeedsConfiguring],\r\n                    disabled: true,\r\n                    list: [NeedsConfiguring],\r\n                });\r\n                this.configure();\r\n            }\r\n        });\r\n    }\r\n\r\n    public render() {\r\n        const multi = <div style={{ flexDirection: 'column' }}>\r\n            <select multiple={true} id='multi-select-parameter' className='parameter' value={this.state.currentVal} onChange={this.updateParam} disabled={this.state.disabled} style={{ backgroundColor: this.state.bg, color: 'inherit' }}>\r\n                {this.state.list.map((option: any) => (<option key={option.value || option.value} value={option.value}>{option.displayValue}</option>))}\r\n            </select>\r\n            <Button kind='filled' onClick={this.apply} style={{ display: (this.state.applyButton ? 'block' : 'none'), marginTop: '6px', width: '60px', height: '20px', marginLeft: 'auto' }}>{this.state.applyButtonLabel}</Button>\r\n        </div>\r\n\r\n        const single = <div>\r\n            <DropdownSelect id='single-select-parameter' className='singleParameter' disabled={this.state.disabled || this.state.multiselect} kind='outline' onChange={this.updateParam} value={this.state.currentVal[0]} style={{ backgroundColor: this.state.bg, color: 'inherit', fontSize: '11px' }}>\r\n                {this.state.list.map((option: any) => <option key={option.value} value={option.value}>{option.displayValue}</option>)}\r\n            </DropdownSelect>\r\n        </div>\r\n\r\n        return (\r\n            <>\r\n                {this.state.multiselect ? multi : single}\r\n            </>\r\n        );\r\n    }\r\n}\r\n\r\nexport default DataDrivenParameter;\r\n","import * as React from 'react';\r\nimport './home.css';\r\n\r\nclass Home extends React.Component<any, any> {\r\n    public render() {\r\n        return (\r\n\t\t\t<React.Fragment>\r\n\t\t\t\t<div className='icontainer'>\r\n\t\t\t\t\t<div className='box'>\r\n\t\t\t\t\t\t<div className='left'>\r\n\t\t\t\t\t\t\t<h1 className='iheader'>Data-Driven Parameters</h1>\r\n\t\t\t\t\t\t\t<span className='tagline'>Automatically update your parameters based on your data!</span>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t<div className='right'>\r\n\t\t\t\t\t\t\t<h4 className='big'>What is it?</h4>\r\n\t\t\t\t\t\t\t<p>This extension allows you to add a parameter to a Tableau dashboard whose domain is based on your data. Added a new product line? No longer do you need to manually edit the parameter to update it, with this extension your parameter values\r\n\t\t\t\t\t\t\tupdate automatically!</p>\r\n\t\t\t\t\t\t\t<h4 className='big'>Using the Extension</h4>\r\n\t\t\t\t\t\t\t<ol>\r\n\t\t\t\t\t\t\t\t<li>Create an open input (All) parameter with a data type matching the field you want to use to populate it.</li>\r\n\t\t\t\t\t\t\t\t<li>Drag in a new Extension object to your dashboard.</li>\r\n\t\t\t\t\t\t\t\t<li>Find the manifest (.trex) file you downloaded above.</li>\r\n\t\t\t\t\t\t\t\t<li>Select the parameter you created above for the extension to manipulate.</li>\r\n\t\t\t\t\t\t\t\t<li>Select the worksheet that holds the field you want to base your parameter on.</li>\r\n\t\t\t\t\t\t\t\t<li>Select the field you want to base your parameter on.</li>\r\n\t\t\t\t\t\t\t\t<li>Optional: Configure your text and background colors.</li>\r\n\t\t\t\t\t\t\t\t<li>Click 'OK'.</li>\r\n\t\t\t\t\t\t\t</ol>\r\n\t\t\t\t\t\t\t<p><b>Note:</b> You can add as many instances of this extension as you like!</p>\r\n\t\t\t\t\t\t\t<div className='gh'>\r\n\t\t\t\t\t\t\t\tGet this extension and more in the <a href='https://extensiongallery.tableau.com/'>Extension Gallery</a>.\r\n\t\t\t\t\t\t\t\t{/* <a href='https://github.com/tableau/extension-data-driven-parameters'>View on GitHub</a> */}\r\n\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>\r\n\t\t\t</React.Fragment>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Home;","import 'react-app-polyfill/ie11';\r\nimport * as React from 'react';\r\nimport * as ReactDOM from 'react-dom';\r\nimport { HashRouter, Route } from 'react-router-dom';\r\nimport Configure from './Configure';\r\nimport DataDrivenParameter from './DataDrivenParameter';\r\nimport Home from './Home';\r\n\r\ndeclare global {\r\n  interface Window { tableau: any; }\r\n}\r\n\r\nconst PrimaryLayout = () => (\r\n  <React.Fragment>\r\n    <Route path='/' exact={true} component={Home} />\r\n    <Route path='/parameter' component={DataDrivenParameter} />\r\n    <Route path='/config' component={Configure} />\r\n  </React.Fragment>\r\n)\r\n\r\nclass App extends React.Component {\r\n  public render() {\r\n    return (\r\n      <HashRouter>\r\n        <PrimaryLayout />\r\n      </HashRouter>\r\n    )\r\n  }\r\n}\r\n\r\nReactDOM.render(<App />, document.getElementById('container'));\r\n"],"sourceRoot":""}